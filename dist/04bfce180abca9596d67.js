(this["webpackJsonp"] = this["webpackJsonp"] || []).push([[8],{

/***/ "./src/games/reversi/game.ts":
/*!***********************************!*\
  !*** ./src/games/reversi/game.ts ***!
  \***********************************/
/*! exports provided: getValidMoves, placePiece, getScoreBoard, ReversiGame */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getValidMoves", function() { return getValidMoves; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "placePiece", function() { return placePiece; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getScoreBoard", function() { return getScoreBoard; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReversiGame", function() { return ReversiGame; });
/* harmony import */ var _freeboardgame_org_boardgame_io_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @freeboardgame.org/boardgame.io/core */ "./node_modules/@freeboardgame.org/boardgame.io/core.js");
/* harmony import */ var _freeboardgame_org_boardgame_io_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_freeboardgame_org_boardgame_io_core__WEBPACK_IMPORTED_MODULE_0__);
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



function toPosition(x, y) {
  return y * 8 + x;
}

function inBounds(x, y) {
  return x >= 0 && x < 8 && y >= 0 && y < 8;
}

function getValidMoves(G, playerID) {
  var validMoves = new Set();
  G.points.map(function (player, position) {
    return {
      player: player,
      position: position
    };
  }).filter(function (point) {
    return point.player === playerID;
  }).forEach(function (point) {
    for (var i = -1; i <= 1; i++) {
      for (var j = -1; j <= 1; j++) {
        if (i === 0 && j === 0) {
          continue;
        }

        var x = point.position % 8;
        var y = Math.floor(point.position / 8);
        var currX = x + i;
        var currY = y + j;
        var k = 1;
        var end = null;

        while (inBounds(currX, currY) && G.points[toPosition(currX, currY)] !== playerID) {
          var position = toPosition(currX, currY);

          if (G.points[position] === null) {
            end = position;
            break;
          }

          k++;
          currX = x + i * k;
          currY = y + j * k;
        }

        if (end !== null && k > 1) {
          validMoves.add(end);
        }
      }
    }
  });

  if (validMoves.size > 0) {
    return validMoves;
  }

  G.points.map(function (player, position) {
    return {
      player: player,
      position: position
    };
  }).filter(function (point) {
    return point.player === null;
  }).forEach(function (point) {
    for (var i = -1; i <= 1; i++) {
      for (var j = -1; j <= 1; j++) {
        if (i === 0 && j === 0) {
          continue;
        }

        var x = point.position % 8;
        var y = Math.floor(point.position / 8);

        if (inBounds(x + i, y + j) && G.points[toPosition(x + i, y + j)] !== null) {
          validMoves.add(point.position);
        }
      }
    }
  });
  return validMoves;
}
function placePiece(G, ctx, x, y) {
  if (G.points[toPosition(x, y)] !== null) {
    return _freeboardgame_org_boardgame_io_core__WEBPACK_IMPORTED_MODULE_0__["INVALID_MOVE"];
  }

  var changed = [toPosition(x, y)]; // Changed positions

  for (var i = -1; i <= 1; i++) {
    for (var j = -1; j <= 1; j++) {
      if (i === 0 && j === 0) {
        continue;
      }

      var valid = false;
      var update = [];
      var currX = x + i;
      var currY = y + j;

      for (var k = 2; inBounds(currX, currY) && G.points[toPosition(currX, currY)] !== null; k++) {
        if (G.points[toPosition(currX, currY)] === ctx.currentPlayer) {
          valid = true;
          break;
        }

        update.push(toPosition(currX, currY));
        currX = x + i * k;
        currY = y + j * k;
      }

      if (valid) {
        changed.push.apply(changed, update);
      }
    }
  }

  if (changed.length === 1) {
    if (getValidMoves(G, ctx.playerID).has(toPosition(x, y))) {
      return Object.assign({}, G, {
        points: Object.values(Object.assign({}, G.points, _defineProperty({}, toPosition(x, y), ctx.playerID)))
      });
    }

    return _freeboardgame_org_boardgame_io_core__WEBPACK_IMPORTED_MODULE_0__["INVALID_MOVE"];
  } else {
    changed.sort(function (a, b) {
      return b - a;
    });
    return Object.assign({}, G, {
      points: G.points.map(function (point, i) {
        if (changed.length > 0 && i === changed[changed.length - 1]) {
          changed.pop();
          return ctx.playerID;
        } else {
          return point;
        }
      })
    });
  }
}
function getScoreBoard(G, ctx) {
  var scoreBoard = new Array(ctx.numPlayers).fill(0);
  G.points.filter(function (point) {
    return point !== null && parseInt(point) < ctx.numPlayers;
  }).forEach(function (point) {
    return scoreBoard[point]++;
  });
  return scoreBoard.map(function (score, i) {
    return {
      playerID: i.toString(),
      score: score
    };
  }).sort(function (a, b) {
    return b.score - a.score;
  });
}
var GameConfig = {
  name: 'reversi',
  flow: {
    movesPerTurn: 1,
    endGameIf: function endGameIf(G, ctx) {
      if (!G.points.some(function (point) {
        return point === null;
      })) {
        return {
          scoreboard: getScoreBoard(G, ctx)
        };
      }
    }
  },
  moves: {
    placePiece: placePiece
  },
  setup: function setup(ctx) {
    var points = Array(64).fill(null);

    if (ctx.numPlayers === 2) {
      points[toPosition(4, 4)] = '1';
      points[toPosition(4, 3)] = '2';
    } else {
      points[toPosition(4, 3)] = '1';
      points[toPosition(4, 4)] = '2';
    }

    points[toPosition(3, 3)] = '0';
    points[toPosition(3, 4)] = '3';
    return {
      points: points
    };
  }
};
var ReversiGame = Object(_freeboardgame_org_boardgame_io_core__WEBPACK_IMPORTED_MODULE_0__["Game"])(GameConfig);

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,