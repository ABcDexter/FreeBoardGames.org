(this["webpackJsonp"] = this["webpackJsonp"] || []).push([[7],{

/***/ "./src/games/checkers/game.ts":
/*!************************************!*\
  !*** ./src/games/checkers/game.ts ***!
  \************************************/
/*! exports provided: INITIAL_BOARD, sumCoords, multiplyCoord, inBounds, toCoord, toIndex, areCoordsEqual, checkPosition, getValidMoves, move, CheckersGame */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "INITIAL_BOARD", function() { return INITIAL_BOARD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sumCoords", function() { return sumCoords; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyCoord", function() { return multiplyCoord; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inBounds", function() { return inBounds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toCoord", function() { return toCoord; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toIndex", function() { return toIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "areCoordsEqual", function() { return areCoordsEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "checkPosition", function() { return checkPosition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getValidMoves", function() { return getValidMoves; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "move", function() { return move; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CheckersGame", function() { return CheckersGame; });
/* harmony import */ var _freeboardgame_org_boardgame_io_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @freeboardgame.org/boardgame.io/core */ "./node_modules/@freeboardgame.org/boardgame.io/core.js");
/* harmony import */ var _freeboardgame_org_boardgame_io_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_freeboardgame_org_boardgame_io_core__WEBPACK_IMPORTED_MODULE_0__);
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }



var piece = function piece(id, player) {
  return {
    id: id,
    playerID: player.toString(),
    isKing: false
  };
};

var INITIAL_BOARD = [null, piece(0, 1), null, piece(1, 1), null, piece(2, 1), null, piece(3, 1), piece(4, 1), null, piece(5, 1), null, piece(6, 1), null, piece(7, 1), null, null, piece(8, 1), null, piece(9, 1), null, piece(10, 1), null, piece(11, 1), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, piece(12, 0), null, piece(13, 0), null, piece(14, 0), null, piece(15, 0), null, null, piece(16, 0), null, piece(17, 0), null, piece(18, 0), null, piece(19, 0), piece(20, 0), null, piece(21, 0), null, piece(22, 0), null, piece(23, 0), null];
var MAN_DIRS = [[{
  x: -1,
  y: -1
}, {
  x: 1,
  y: -1
}], [{
  x: -1,
  y: 1
}, {
  x: 1,
  y: 1
}]];
var KING_DIRS = [{
  x: -1,
  y: 1
}, {
  x: 1,
  y: 1
}, {
  x: -1,
  y: -1
}, {
  x: 1,
  y: -1
}];
function sumCoords(a, b) {
  return {
    x: a.x + b.x,
    y: a.y + b.y
  };
}
function multiplyCoord(coord, multiplier) {
  return {
    x: coord.x * multiplier,
    y: coord.y * multiplier
  };
}
function inBounds(coord) {
  return coord.x >= 0 && coord.x < 8 && coord.y >= 0 && coord.y < 8;
}
function toCoord(position) {
  var x = position % 8;
  var y = Math.floor(position / 8);
  return {
    x: x,
    y: y
  };
}
function toIndex(coord) {
  return coord.x + coord.y * 8;
}
function areCoordsEqual(a, b) {
  return a.x === b.x && a.y === b.y;
}
function checkPosition(G, playerID, piece, coord) {
  var dirs = piece.isKing ? KING_DIRS : MAN_DIRS[playerID];
  var moves = [];
  var jumped = false;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = dirs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var dir = _step.value;
      // Look into all valid directions
      var opponentBefore = null;

      for (var i = 1; piece.isKing ? true : i < 3; i++) {
        var final = sumCoords(coord, multiplyCoord(dir, i)); // Break if move is out of bounds

        if (!inBounds(final)) {
          break;
        }

        var moveTo = G.board[toIndex(final)]; // Break if we encounter our piece

        if (moveTo !== null && moveTo.playerID === playerID) {
          break;
        }

        if (moveTo !== null && moveTo.playerID !== playerID) {
          // If we already encountered opponent the directions is blocked
          if (opponentBefore) {
            break;
          }

          opponentBefore = final;
        }

        if (moveTo === null) {
          moves.push({
            from: coord,
            to: final,
            jumped: opponentBefore
          });

          if (opponentBefore) {
            jumped = true;
            break;
          } // If there is nothing and the piece isn't king there is no need to continue


          if (!piece.isKing) {
            break;
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return {
    moves: moves,
    jumped: jumped
  };
}
function getValidMoves(G, playerID, jumping) {
  var movesTotal = [];
  var jumpedTotal = false;

  if (typeof jumping === 'undefined') {
    G.board.forEach(function (piece, index) {
      if (piece !== null && piece.playerID === playerID) {
        var _movesTotal;

        var coord = toCoord(index);

        var _checkPosition = checkPosition(G, playerID, piece, coord),
            moves = _checkPosition.moves,
            jumped = _checkPosition.jumped;

        (_movesTotal = movesTotal).push.apply(_movesTotal, _toConsumableArray(moves));

        jumpedTotal = jumpedTotal || jumped;
      }
    });
  } else {
    var _checkPosition2 = checkPosition(G, playerID, jumping.data, jumping.coord),
        moves = _checkPosition2.moves,
        jumped = _checkPosition2.jumped;

    movesTotal = moves;
    jumpedTotal = jumped;
  }

  if (jumpedTotal) {
    return movesTotal.filter(function (move) {
      return move.jumped;
    });
  } else {
    return movesTotal;
  }
}
function move(G, ctx, from, to) {
  var indexFrom = toIndex(from);
  var indexTo = toIndex(to);
  var piece = G.board[indexFrom];
  var crownhead = ctx.playerID === '0' ? 0 : 7;

  if (piece === null || piece.playerID !== ctx.playerID || G.board[indexTo] !== null) {
    return _freeboardgame_org_boardgame_io_core__WEBPACK_IMPORTED_MODULE_0__["INVALID_MOVE"];
  }

  var moves = G.jumping === null ? getValidMoves(G, ctx.playerID) : getValidMoves(G, ctx.playerID, G.jumping);
  var move = moves.find(function (move) {
    return areCoordsEqual(move.from, from) && areCoordsEqual(move.to, to);
  });

  if (typeof move === 'undefined') {
    return _freeboardgame_org_boardgame_io_core__WEBPACK_IMPORTED_MODULE_0__["INVALID_MOVE"];
  }

  var jumped = move.jumped !== null ? toIndex(move.jumped) : -1;
  var isKing = piece.isKing || to.y === crownhead;
  var newG = Object.assign({}, G, {
    board: G.board.map(function (square, i) {
      switch (i) {
        case indexFrom:
          return null;

        case indexTo:
          return Object.assign({}, piece, {
            isKing: isKing
          });

        case jumped:
          return null;

        default:
          return square;
      }
    }),
    jumping: null
  });

  if (move.jumped === null) {
    return newG;
  }

  var jumping = {
    data: Object.assign({}, piece, {
      isKing: isKing
    }),
    coord: to
  };
  var postMoves = getValidMoves(newG, ctx.playerID, jumping);

  if (postMoves.length > 0 && postMoves[0].jumped !== null) {
    return Object.assign({}, newG, {
      jumping: jumping
    });
  }

  return newG;
}
var CheckersGame = Object(_freeboardgame_org_boardgame_io_core__WEBPACK_IMPORTED_MODULE_0__["Game"])({
  name: 'checkers',
  setup: function setup() {
    return {
      board: INITIAL_BOARD,
      jumping: null
    };
  },
  moves: {
    move: move
  },
  flow: {
    movesPerTurn: 1,
    turnOrder: {
      first: function first() {
        return 0;
      },
      next: function next(G, ctx) {
        return G.jumping === null ? (ctx.playOrderPos + 1) % ctx.numPlayers : ctx.playOrderPos;
      }
    },
    endGameIf: function endGameIf(G, ctx) {
      if (getValidMoves(G, ctx.currentPlayer === '0' ? '1' : '0').length === 0) {
        return {
          winner: ctx.currentPlayer
        };
      }
    }
  }
});

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,