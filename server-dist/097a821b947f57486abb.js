exports.ids = [8];
exports.modules = {

/***/ "./src/common/Checkerboard.tsx":
/*!*************************************!*\
  !*** ./src/common/Checkerboard.tsx ***!
  \*************************************/
/*! exports provided: Checkerboard, algebraicToCartesian, cartesianToAlgebraic, applyInvertion */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Checkerboard\", function() { return Checkerboard; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"algebraicToCartesian\", function() { return algebraicToCartesian; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cartesianToAlgebraic\", function() { return cartesianToAlgebraic; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"applyInvertion\", function() { return applyInvertion; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _freeboardgame_org_boardgame_io_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @freeboardgame.org/boardgame.io/ui */ \"@freeboardgame.org/boardgame.io/ui\");\n/* harmony import */ var _freeboardgame_org_boardgame_io_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_freeboardgame_org_boardgame_io_ui__WEBPACK_IMPORTED_MODULE_1__);\n/*\n * Copyright 2018 The @freeboardgame.org/boardgame.io Authors.\n *\n * Use of this source code is governed by a MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n */\n\n\n/**\n * Checkerboard\n *\n * Component that will show a configurable checker board for games like\n * chess, checkers and others. The vertical columns of squares are labeled\n * with letters from a to z, while the rows are labeled with numbers, starting\n * with 1.\n *\n * Props:\n *   onClick - On Click Callback, (row, col) of the square passed as argument.\n *   primaryColor - Primary color, #d18b47 by default.\n *   secondaryColor - Secondary color, #ffce9e by default.\n *   colorMap - Object of object having cell names as key and colors as values.\n *   Ex: { 'c5': 'red' } colors cells c5 with red.\n *\n * Usage:\n *\n * <Checkerboard>\n *   <Token square={'c5'}>\n *     <Knight color='dark' />\n *   </Token>\n * </Checkerboard>\n */\n\nconst NUM_COLS = 8;\nconst NUM_ROWS = 8;\nclass Checkerboard extends react__WEBPACK_IMPORTED_MODULE_0___default.a.Component {\n  constructor() {\n    super(...arguments);\n    this._onClick = this.onClick.bind(this);\n  }\n\n  onClick(coords) {\n    const {\n      x,\n      y\n    } = coords;\n    this.props.onClick({\n      square: cartesianToAlgebraic(x, y, this.props.invert)\n    });\n  }\n\n  render() {\n    // Convert the square=\"\" prop to x and y.\n    const tokens = react__WEBPACK_IMPORTED_MODULE_0___default.a.Children.map(this.props.children, child => {\n      if (child.props.square) {\n        const square = child.props.square;\n        const {\n          x,\n          y\n        } = algebraicToCartesian(square, this.props.invert);\n        return react__WEBPACK_IMPORTED_MODULE_0___default.a.cloneElement(child, {\n          x,\n          y\n        });\n      } else {\n        return react__WEBPACK_IMPORTED_MODULE_0___default.a.cloneElement(child, applyInvertion({\n          x: child.props.x,\n          y: child.props.y\n        }, this.props.invert));\n      }\n    }); // Build colorMap with checkerboard pattern.\n\n    const colorMap = {};\n\n    for (let x = 0; x < NUM_COLS; x++) {\n      for (let y = 0; y < NUM_ROWS; y++) {\n        const key = `${x},${y}`;\n        let color = this.props.secondaryColor;\n\n        if ((x + y) % 2 === 0) {\n          color = this.props.primaryColor;\n        }\n\n        colorMap[key] = color;\n      }\n    } // Add highlighted squares.\n\n\n    for (const square of Object.keys(this.props.highlightedSquares)) {\n      const {\n        x,\n        y\n      } = algebraicToCartesian(square, this.props.invert);\n      const key = `${x},${y}`;\n      colorMap[key] = this.props.highlightedSquares[square];\n    }\n\n    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_freeboardgame_org_boardgame_io_ui__WEBPACK_IMPORTED_MODULE_1__[\"Grid\"], {\n      rows: NUM_ROWS,\n      cols: NUM_COLS,\n      style: this.props.style,\n      onClick: this._onClick,\n      colorMap: colorMap\n    }, tokens);\n  }\n\n}\nCheckerboard.defaultProps = {\n  invert: false,\n  primaryColor: '#ffce9e',\n  secondaryColor: '#d18b47',\n  highlightedSquares: {},\n  style: {}\n};\n/**\n * Given an algebraic notation, returns x and y values.\n * Example: A1 returns { x: 0, y: 0 }\n */\n\nfunction algebraicToCartesian(square, invert) {\n  const regexp = /([A-Za-z])([0-9]+)/g;\n  const match = regexp.exec(square);\n\n  if (match == null) {\n    throw Error('Invalid square provided: ' + square);\n  }\n\n  const colSymbol = match[1].toLowerCase();\n  const col = colSymbol.charCodeAt(0) - 'a'.charCodeAt(0);\n  const row = parseInt(match[2], 10);\n\n  if (invert) {\n    return {\n      x: NUM_COLS - col - 1,\n      y: row - 1\n    };\n  } else {\n    return {\n      x: col,\n      y: NUM_ROWS - row\n    };\n  }\n}\n/**\n * Given an x and y values, returns algebraic notation.\n * Example: 0, 0 returns A1\n */\n\nfunction cartesianToAlgebraic(x, y, invert) {\n  if (invert) {\n    const colSymbol = String.fromCharCode(NUM_COLS - x - 1 + 'a'.charCodeAt(0));\n    return colSymbol + (y + 1);\n  } else {\n    const colSymbol = String.fromCharCode(x + 'a'.charCodeAt(0));\n    return colSymbol + (NUM_ROWS - y);\n  }\n}\nfunction applyInvertion(coord, invert) {\n  if (invert) {\n    return {\n      x: NUM_COLS - coord.x - 1,\n      y: NUM_ROWS - coord.y - 1\n    };\n  }\n\n  return coord;\n}\n\n//# sourceURL=webpack:///./src/common/Checkerboard.tsx?");

/***/ }),

/***/ "./src/common/gameMode.ts":
/*!********************************!*\
  !*** ./src/common/gameMode.ts ***!
  \********************************/
/*! exports provided: isLocalGame, isOnlineGame, isAIGame */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isLocalGame\", function() { return isLocalGame; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isOnlineGame\", function() { return isOnlineGame; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isAIGame\", function() { return isAIGame; });\n/* harmony import */ var _App_Game_GameModePicker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../App/Game/GameModePicker */ \"./src/App/Game/GameModePicker.tsx\");\n\nfunction isLocalGame(gameArgs) {\n  return gameArgs && gameArgs.mode === _App_Game_GameModePicker__WEBPACK_IMPORTED_MODULE_0__[\"GameMode\"].LocalFriend;\n}\nfunction isOnlineGame(gameArgs) {\n  return gameArgs && gameArgs.mode === _App_Game_GameModePicker__WEBPACK_IMPORTED_MODULE_0__[\"GameMode\"].OnlineFriend;\n}\nfunction isAIGame(gameArgs) {\n  return gameArgs && gameArgs.mode === _App_Game_GameModePicker__WEBPACK_IMPORTED_MODULE_0__[\"GameMode\"].AI;\n}\n\n//# sourceURL=webpack:///./src/common/gameMode.ts?");

/***/ }),

/***/ "./src/games/checkers/board.tsx":
/*!**************************************!*\
  !*** ./src/games/checkers/board.tsx ***!
  \**************************************/
/*! exports provided: Board */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Board\", function() { return Board; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _App_Game_GameLayout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../App/Game/GameLayout */ \"./src/App/Game/GameLayout.tsx\");\n/* harmony import */ var _game__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./game */ \"./src/games/checkers/game.ts\");\n/* harmony import */ var _common_Checkerboard__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/Checkerboard */ \"./src/common/Checkerboard.tsx\");\n/* harmony import */ var _freeboardgame_org_boardgame_io_ui__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @freeboardgame.org/boardgame.io/ui */ \"@freeboardgame.org/boardgame.io/ui\");\n/* harmony import */ var _freeboardgame_org_boardgame_io_ui__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_freeboardgame_org_boardgame_io_ui__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @material-ui/core/Typography */ \"@material-ui/core/Typography\");\n/* harmony import */ var _material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _material_ui_core_colors_grey__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @material-ui/core/colors/grey */ \"@material-ui/core/colors/grey\");\n/* harmony import */ var _material_ui_core_colors_grey__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_colors_grey__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _material_ui_core_colors_blue__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @material-ui/core/colors/blue */ \"@material-ui/core/colors/blue\");\n/* harmony import */ var _material_ui_core_colors_blue__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_material_ui_core_colors_blue__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _common_gameMode__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../common/gameMode */ \"./src/common/gameMode.ts\");\nvar __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\n\n\n\n\n\n\n\n\n\n\nfunction roundCoords(coords) {\n  return {\n    x: Math.round(coords.x),\n    y: Math.round(coords.y)\n  };\n}\n\nclass Board extends react__WEBPACK_IMPORTED_MODULE_0__[\"Component\"] {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      selected: null,\n      validMoves: Object(_game__WEBPACK_IMPORTED_MODULE_2__[\"getValidMoves\"])(this.props.G, this.props.ctx.currentPlayer)\n    };\n\n    this._isSelectable = coords => {\n      if (Object(_common_gameMode__WEBPACK_IMPORTED_MODULE_8__[\"isOnlineGame\"])(this.props.gameArgs) && this.props.playerID !== this.props.ctx.currentPlayer) {\n        return false;\n      }\n\n      return this.state.validMoves.some(move => Object(_game__WEBPACK_IMPORTED_MODULE_2__[\"areCoordsEqual\"])(move.from, coords));\n    };\n\n    this._onClick = coords => {\n      const position = Object(_common_Checkerboard__WEBPACK_IMPORTED_MODULE_3__[\"algebraicToCartesian\"])(coords.square);\n\n      if (this.state.selected === null && this._isSelectable(position)) {\n        this.setState(Object.assign({}, this.state, {\n          selected: position\n        }));\n      } else {\n        this._move(position);\n      }\n    };\n\n    this._shouldDrag = coords => {\n      return this._isSelectable(Object(_common_Checkerboard__WEBPACK_IMPORTED_MODULE_3__[\"applyInvertion\"])(coords, this.isInverted()));\n    };\n\n    this._onDrag = coords => {\n      const x = coords.x;\n      const y = coords.y;\n      const originalX = coords.originalX;\n      const originalY = coords.originalY;\n\n      if (Math.sqrt(Math.pow(x - originalX, 2) + Math.pow(y - originalY, 2)) > 0.2) {\n        this.setState(Object.assign({}, this.state, {\n          selected: Object(_common_Checkerboard__WEBPACK_IMPORTED_MODULE_3__[\"applyInvertion\"])({\n            x: originalX,\n            y: originalY\n          }, this.isInverted())\n        }));\n      } else {\n        this.setState(Object.assign({}, this.state, {\n          selected: null\n        }));\n      }\n    };\n\n    this.stepAI = () => {\n      setTimeout(() => __awaiter(this, void 0, void 0, function* () {\n        yield this.props.step();\n\n        if (this.props.ctx.currentPlayer === '1') {\n          this.stepAI();\n        }\n      }), 1000);\n    };\n\n    this._onDrop = coords => __awaiter(this, void 0, void 0, function* () {\n      if (this.state.selected) {\n        this._move(Object(_common_Checkerboard__WEBPACK_IMPORTED_MODULE_3__[\"applyInvertion\"])(roundCoords(coords), this.isInverted()));\n      }\n    });\n\n    this._move = coords => __awaiter(this, void 0, void 0, function* () {\n      if (this.state.selected === null || coords === null) {\n        return;\n      }\n\n      yield this.props.moves.move(this.state.selected, coords);\n      this.setState(Object.assign({}, this.state, {\n        selected: null\n      }));\n\n      if (Object(_common_gameMode__WEBPACK_IMPORTED_MODULE_8__[\"isAIGame\"])(this.props.gameArgs) && this.props.ctx.currentPlayer === '1') {\n        this.stepAI();\n      }\n    });\n\n    this.getPieces = () => {\n      return this.props.G.board.map((piece, index) => ({\n        data: piece,\n        index\n      })).filter(piece => piece.data !== null).map(piece => {\n        const {\n          x,\n          y\n        } = Object(_game__WEBPACK_IMPORTED_MODULE_2__[\"toCoord\"])(piece.index);\n        return react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](_freeboardgame_org_boardgame_io_ui__WEBPACK_IMPORTED_MODULE_4__[\"Token\"], {\n          x: x,\n          y: y,\n          draggable: true,\n          shouldDrag: this._shouldDrag,\n          onDrop: this._onDrop,\n          onDrag: this._onDrag,\n          animate: true,\n          key: piece.data.id\n        }, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"g\", null, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"circle\", {\n          r: \"0.4\",\n          fill: piece.data.playerID === '0' ? _material_ui_core_colors_grey__WEBPACK_IMPORTED_MODULE_6___default.a[50] : _material_ui_core_colors_grey__WEBPACK_IMPORTED_MODULE_6___default.a[900],\n          cx: \"0.5\",\n          cy: \"0.5\"\n        }), piece.data.isKing ? react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"circle\", {\n          r: \"0.2\",\n          cx: \"0.5\",\n          cy: \"0.5\",\n          fill: piece.data.playerID === '1' ? _material_ui_core_colors_grey__WEBPACK_IMPORTED_MODULE_6___default.a[800] : _material_ui_core_colors_grey__WEBPACK_IMPORTED_MODULE_6___default.a[400]\n        }) : null));\n      });\n    };\n  }\n\n  isInverted() {\n    return Object(_common_gameMode__WEBPACK_IMPORTED_MODULE_8__[\"isOnlineGame\"])(this.props.gameArgs) && this.props.playerID === '1';\n  }\n\n  _getHighlightedSquares() {\n    const result = {};\n\n    if (this.state.selected !== null) {\n      result[Object(_common_Checkerboard__WEBPACK_IMPORTED_MODULE_3__[\"cartesianToAlgebraic\"])(this.state.selected.x, this.state.selected.y, false)] = _material_ui_core_colors_blue__WEBPACK_IMPORTED_MODULE_7___default.a[700];\n      this.state.validMoves.filter(move => Object(_game__WEBPACK_IMPORTED_MODULE_2__[\"areCoordsEqual\"])(this.state.selected, move.from)).forEach(move => {\n        result[Object(_common_Checkerboard__WEBPACK_IMPORTED_MODULE_3__[\"cartesianToAlgebraic\"])(move.to.x, move.to.y, false)] = _material_ui_core_colors_blue__WEBPACK_IMPORTED_MODULE_7___default.a[500];\n      });\n    }\n\n    return result;\n  }\n\n  _getStatus() {\n    if (Object(_common_gameMode__WEBPACK_IMPORTED_MODULE_8__[\"isOnlineGame\"])(this.props.gameArgs)) {\n      if (this.props.ctx.currentPlayer === this.props.playerID) {\n        return 'Move piece';\n      } else {\n        return 'Waiting for opponent...';\n      }\n    } else {\n      switch (this.props.ctx.currentPlayer) {\n        case '0':\n          return \"White's turn\";\n\n        case '1':\n          return \"Black's turn\";\n      }\n    }\n  }\n\n  _getGameOver() {\n    const winner = this.props.ctx.gameover.winner;\n\n    if (winner) {\n      if (Object(_common_gameMode__WEBPACK_IMPORTED_MODULE_8__[\"isLocalGame\"])(this.props.gameArgs)) {\n        if (winner === '0') {\n          return 'white won';\n        } else {\n          return 'black won';\n        }\n      } else {\n        if (winner === this.props.playerID) {\n          return 'you won';\n        } else {\n          return 'you lost';\n        }\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.ctx.turn !== this.props.ctx.turn) {\n      this.setState(Object.assign({}, this.state, {\n        validMoves: this.props.G.jumping === null ? Object(_game__WEBPACK_IMPORTED_MODULE_2__[\"getValidMoves\"])(this.props.G, this.props.ctx.currentPlayer) : Object(_game__WEBPACK_IMPORTED_MODULE_2__[\"getValidMoves\"])(this.props.G, this.props.ctx.currentPlayer, this.props.G.jumping)\n      }));\n    }\n  }\n\n  render() {\n    if (this.props.ctx.gameover) {\n      return react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](_App_Game_GameLayout__WEBPACK_IMPORTED_MODULE_1__[\"GameLayout\"], {\n        gameOver: this._getGameOver(),\n        gameArgs: this.props.gameArgs\n      });\n    }\n\n    return react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](_App_Game_GameLayout__WEBPACK_IMPORTED_MODULE_1__[\"GameLayout\"], null, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_5___default.a, {\n      variant: \"h5\",\n      style: {\n        textAlign: 'center',\n        color: 'white',\n        marginBottom: '16px'\n      }\n    }, this._getStatus()), react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](_common_Checkerboard__WEBPACK_IMPORTED_MODULE_3__[\"Checkerboard\"], {\n      onClick: this._onClick,\n      invert: this.isInverted(),\n      highlightedSquares: this._getHighlightedSquares()\n    }, this.getPieces()));\n  }\n\n}\n\n//# sourceURL=webpack:///./src/games/checkers/board.tsx?");

/***/ }),

/***/ "./src/games/checkers/config.ts":
/*!**************************************!*\
  !*** ./src/games/checkers/config.ts ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./game */ \"./src/games/checkers/game.ts\");\n/* harmony import */ var _board__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./board */ \"./src/games/checkers/board.tsx\");\n\n\nconst config = {\n  bgioGame: _game__WEBPACK_IMPORTED_MODULE_0__[\"CheckersGame\"],\n  bgioBoard: _board__WEBPACK_IMPORTED_MODULE_1__[\"Board\"]\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (config);\n\n//# sourceURL=webpack:///./src/games/checkers/config.ts?");

/***/ }),

/***/ "./src/games/checkers/game.ts":
/*!************************************!*\
  !*** ./src/games/checkers/game.ts ***!
  \************************************/
/*! exports provided: INITIAL_BOARD, sumCoords, multiplyCoord, inBounds, toCoord, toIndex, areCoordsEqual, checkPosition, getValidMoves, move, CheckersGame */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"INITIAL_BOARD\", function() { return INITIAL_BOARD; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sumCoords\", function() { return sumCoords; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiplyCoord\", function() { return multiplyCoord; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"inBounds\", function() { return inBounds; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toCoord\", function() { return toCoord; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toIndex\", function() { return toIndex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"areCoordsEqual\", function() { return areCoordsEqual; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"checkPosition\", function() { return checkPosition; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getValidMoves\", function() { return getValidMoves; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"move\", function() { return move; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CheckersGame\", function() { return CheckersGame; });\n/* harmony import */ var _freeboardgame_org_boardgame_io_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @freeboardgame.org/boardgame.io/core */ \"@freeboardgame.org/boardgame.io/core\");\n/* harmony import */ var _freeboardgame_org_boardgame_io_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_freeboardgame_org_boardgame_io_core__WEBPACK_IMPORTED_MODULE_0__);\n\n\nconst piece = (id, player) => ({\n  id,\n  playerID: player.toString(),\n  isKing: false\n});\n\nconst INITIAL_BOARD = [null, piece(0, 1), null, piece(1, 1), null, piece(2, 1), null, piece(3, 1), piece(4, 1), null, piece(5, 1), null, piece(6, 1), null, piece(7, 1), null, null, piece(8, 1), null, piece(9, 1), null, piece(10, 1), null, piece(11, 1), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, piece(12, 0), null, piece(13, 0), null, piece(14, 0), null, piece(15, 0), null, null, piece(16, 0), null, piece(17, 0), null, piece(18, 0), null, piece(19, 0), piece(20, 0), null, piece(21, 0), null, piece(22, 0), null, piece(23, 0), null];\nconst MAN_DIRS = [[{\n  x: -1,\n  y: -1\n}, {\n  x: 1,\n  y: -1\n}], [{\n  x: -1,\n  y: 1\n}, {\n  x: 1,\n  y: 1\n}]];\nconst KING_DIRS = [{\n  x: -1,\n  y: 1\n}, {\n  x: 1,\n  y: 1\n}, {\n  x: -1,\n  y: -1\n}, {\n  x: 1,\n  y: -1\n}];\nfunction sumCoords(a, b) {\n  return {\n    x: a.x + b.x,\n    y: a.y + b.y\n  };\n}\nfunction multiplyCoord(coord, multiplier) {\n  return {\n    x: coord.x * multiplier,\n    y: coord.y * multiplier\n  };\n}\nfunction inBounds(coord) {\n  return coord.x >= 0 && coord.x < 8 && coord.y >= 0 && coord.y < 8;\n}\nfunction toCoord(position) {\n  const x = position % 8;\n  const y = Math.floor(position / 8);\n  return {\n    x,\n    y\n  };\n}\nfunction toIndex(coord) {\n  return coord.x + coord.y * 8;\n}\nfunction areCoordsEqual(a, b) {\n  return a.x === b.x && a.y === b.y;\n}\nfunction checkPosition(G, playerID, piece, coord) {\n  const dirs = piece.isKing ? KING_DIRS : MAN_DIRS[playerID];\n  let moves = [];\n  let jumped = false;\n\n  for (const dir of dirs) {\n    // Look into all valid directions\n    let opponentBefore = null;\n\n    for (let i = 1; piece.isKing ? true : i < 3; i++) {\n      const final = sumCoords(coord, multiplyCoord(dir, i)); // Break if move is out of bounds\n\n      if (!inBounds(final)) {\n        break;\n      }\n\n      const moveTo = G.board[toIndex(final)]; // Break if we encounter our piece\n\n      if (moveTo !== null && moveTo.playerID === playerID) {\n        break;\n      }\n\n      if (moveTo !== null && moveTo.playerID !== playerID) {\n        // If we already encountered opponent the directions is blocked\n        if (opponentBefore) {\n          break;\n        }\n\n        opponentBefore = final;\n      }\n\n      if (moveTo === null) {\n        moves.push({\n          from: coord,\n          to: final,\n          jumped: opponentBefore\n        });\n\n        if (opponentBefore) {\n          jumped = true;\n          break;\n        } // If there is nothing and the piece isn't king there is no need to continue\n\n\n        if (!piece.isKing) {\n          break;\n        }\n      }\n    }\n  }\n\n  return {\n    moves,\n    jumped\n  };\n}\nfunction getValidMoves(G, playerID, jumping) {\n  let movesTotal = [];\n  let jumpedTotal = false;\n\n  if (typeof jumping === 'undefined') {\n    G.board.forEach((piece, index) => {\n      if (piece !== null && piece.playerID === playerID) {\n        const coord = toCoord(index);\n        const {\n          moves,\n          jumped\n        } = checkPosition(G, playerID, piece, coord);\n        movesTotal.push(...moves);\n        jumpedTotal = jumpedTotal || jumped;\n      }\n    });\n  } else {\n    const {\n      moves,\n      jumped\n    } = checkPosition(G, playerID, jumping.data, jumping.coord);\n    movesTotal = moves;\n    jumpedTotal = jumped;\n  }\n\n  if (jumpedTotal) {\n    return movesTotal.filter(move => move.jumped);\n  } else {\n    return movesTotal;\n  }\n}\nfunction move(G, ctx, from, to) {\n  const indexFrom = toIndex(from);\n  const indexTo = toIndex(to);\n  const piece = G.board[indexFrom];\n  const crownhead = ctx.playerID === '0' ? 0 : 7;\n\n  if (piece === null || piece.playerID !== ctx.playerID || G.board[indexTo] !== null) {\n    return _freeboardgame_org_boardgame_io_core__WEBPACK_IMPORTED_MODULE_0__[\"INVALID_MOVE\"];\n  }\n\n  const moves = G.jumping === null ? getValidMoves(G, ctx.playerID) : getValidMoves(G, ctx.playerID, G.jumping);\n  const move = moves.find(move => areCoordsEqual(move.from, from) && areCoordsEqual(move.to, to));\n\n  if (typeof move === 'undefined') {\n    return _freeboardgame_org_boardgame_io_core__WEBPACK_IMPORTED_MODULE_0__[\"INVALID_MOVE\"];\n  }\n\n  const jumped = move.jumped !== null ? toIndex(move.jumped) : -1;\n  const isKing = piece.isKing || to.y === crownhead;\n  const newG = Object.assign({}, G, {\n    board: G.board.map((square, i) => {\n      switch (i) {\n        case indexFrom:\n          return null;\n\n        case indexTo:\n          return Object.assign({}, piece, {\n            isKing\n          });\n\n        case jumped:\n          return null;\n\n        default:\n          return square;\n      }\n    }),\n    jumping: null\n  });\n\n  if (move.jumped === null) {\n    return newG;\n  }\n\n  const jumping = {\n    data: Object.assign({}, piece, {\n      isKing\n    }),\n    coord: to\n  };\n  const postMoves = getValidMoves(newG, ctx.playerID, jumping);\n\n  if (postMoves.length > 0 && postMoves[0].jumped !== null) {\n    return Object.assign({}, newG, {\n      jumping\n    });\n  }\n\n  return newG;\n}\nconst CheckersGame = Object(_freeboardgame_org_boardgame_io_core__WEBPACK_IMPORTED_MODULE_0__[\"Game\"])({\n  name: 'checkers',\n  setup: () => ({\n    board: INITIAL_BOARD,\n    jumping: null\n  }),\n  moves: {\n    move\n  },\n  flow: {\n    movesPerTurn: 1,\n    turnOrder: {\n      first: () => 0,\n      next: (G, ctx) => G.jumping === null ? (ctx.playOrderPos + 1) % ctx.numPlayers : ctx.playOrderPos\n    },\n    endGameIf: (G, ctx) => {\n      if (getValidMoves(G, ctx.currentPlayer === '0' ? '1' : '0').length === 0) {\n        return {\n          winner: ctx.currentPlayer\n        };\n      }\n    }\n  }\n});\n\n//# sourceURL=webpack:///./src/games/checkers/game.ts?");

/***/ })

};;