exports.ids = [10];
exports.modules = {

/***/ "./src/games/takesix/ai.ts":
/*!*********************************!*\
  !*** ./src/games/takesix/ai.ts ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./game */ \"./src/games/takesix/game.ts\");\nvar __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\n\n\nclass TakeSixBot {\n  play(state, playerID) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (state.ctx.phase === 'CARD_SELECT') {\n        const randomCard = Math.floor(state.G.players[playerID].cards.length * Math.random());\n        return this.makeSelectCardMove(randomCard, playerID);\n      } else {\n        const deckId = this.getBestDeck(state.G, playerID);\n        return this.makeSelectDeckMove(deckId, playerID);\n      }\n    });\n  }\n\n  getBestDeck(G, playerID) {\n    const {\n      card,\n      lastCards\n    } = Object(_game__WEBPACK_IMPORTED_MODULE_0__[\"getCards\"])(G, playerID);\n\n    if (card.number < lastCards[0].number) {\n      return G.decks.map((deck, i) => ({\n        value: deck.reduce((acc, card) => acc + card.value, 0),\n        id: i\n      }), 0).sort((a, b) => a.value - b.value)[0].id;\n    } else {\n      return G.decks.findIndex((deck, i) => Object(_game__WEBPACK_IMPORTED_MODULE_0__[\"isAllowedDeck\"])(G, i, playerID));\n    }\n  }\n\n  makeSelectCardMove(cardId, playerID) {\n    return {\n      action: {\n        type: 'MAKE_MOVE',\n        payload: {\n          type: 'selectCard',\n          args: [cardId],\n          playerID\n        }\n      }\n    };\n  }\n\n  makeSelectDeckMove(deckId, playerID) {\n    return {\n      action: {\n        type: 'MAKE_MOVE',\n        payload: {\n          type: 'selectDeck',\n          args: [deckId],\n          playerID\n        }\n      }\n    };\n  }\n\n}\n\nconst config = {\n  bgioAI: () => {\n    return {\n      bot: TakeSixBot\n    };\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (config);\n\n//# sourceURL=webpack:///./src/games/takesix/ai.ts?");

/***/ }),

/***/ "./src/games/takesix/card.ts":
/*!***********************************!*\
  !*** ./src/games/takesix/card.ts ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Card; });\nclass Card {\n  constructor(num, value, owner) {\n    this.number = num;\n    this.value = value;\n    this.owner = owner;\n  }\n\n}\n\n//# sourceURL=webpack:///./src/games/takesix/card.ts?");

/***/ }),

/***/ "./src/games/takesix/game.ts":
/*!***********************************!*\
  !*** ./src/games/takesix/game.ts ***!
  \***********************************/
/*! exports provided: isAllowedDeck, getCards, selectCard, getScoreBoard, selectDeck, TakeSixGame, TakeSixGameForTest */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isAllowedDeck\", function() { return isAllowedDeck; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getCards\", function() { return getCards; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"selectCard\", function() { return selectCard; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getScoreBoard\", function() { return getScoreBoard; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"selectDeck\", function() { return selectDeck; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TakeSixGame\", function() { return TakeSixGame; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TakeSixGameForTest\", function() { return TakeSixGameForTest; });\n/* harmony import */ var _freeboardgame_org_boardgame_io_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @freeboardgame.org/boardgame.io/core */ \"@freeboardgame.org/boardgame.io/core\");\n/* harmony import */ var _freeboardgame_org_boardgame_io_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_freeboardgame_org_boardgame_io_core__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _card__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./card */ \"./src/games/takesix/card.ts\");\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./player */ \"./src/games/takesix/player.ts\");\n\n\n\n\nfunction sortCards(a, b) {\n  return a.number - b.number;\n}\n\nfunction isAllowedDeck(G, deckId, playerID) {\n  const {\n    card,\n    lastCards\n  } = getCards(G, playerID);\n\n  if (card.number < lastCards[0].number) {\n    return true;\n  }\n\n  const diffs = G.decks.map(deck => card.number - deck[deck.length - 1].number);\n  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = 0;\n  diffs.forEach((diff, index) => {\n    if (diff > 0 && diff < min) {\n      min = diff;\n      minIndex = index;\n    }\n  });\n  return minIndex === deckId;\n}\nfunction getCards(G, playerID) {\n  const lastCards = G.decks.map(deck => deck[deck.length - 1]).sort(sortCards);\n  const card = G.players[playerID].selectedCard;\n  return {\n    card: card,\n    lastCards: lastCards\n  };\n}\n\nfunction moveToHand(G, ctx, card, deckId) {\n  return Object.assign({}, G, {\n    players: Object.values(Object.assign({}, G.players, {\n      [ctx.playerID]: Object.assign({}, G.players[ctx.playerID], {\n        penaltyCards: [...G.players[ctx.playerID].penaltyCards, ...G.decks[deckId]]\n      })\n    })),\n    decks: Object.values(Object.assign({}, G.decks, {\n      [deckId]: [card]\n    }))\n  });\n}\n\nfunction selectCard(G, ctx, id) {\n  if (id < 0 || id >= G.players[ctx.playerID].cards.length) {\n    return _freeboardgame_org_boardgame_io_core__WEBPACK_IMPORTED_MODULE_0__[\"INVALID_MOVE\"];\n  }\n\n  return Object.assign({}, G, {\n    players: Object.values(Object.assign({}, G.players, {\n      [ctx.playerID]: Object.assign({}, G.players[ctx.playerID], {\n        selectedCard: G.players[ctx.playerID].cards.find((_, index) => index === id),\n        cards: G.players[ctx.playerID].cards.filter((_, index) => index !== id)\n      })\n    }))\n  });\n}\nfunction getScoreBoard(G) {\n  return G.players.map((player, i) => ({\n    playerID: i.toString(),\n    score: player.penaltyCards.reduce((acc, card) => acc + card.value, 0)\n  })).sort((a, b) => a.score - b.score);\n}\nfunction selectDeck(G, ctx, id) {\n  if (!isAllowedDeck(G, id, ctx.playerID)) {\n    return _freeboardgame_org_boardgame_io_core__WEBPACK_IMPORTED_MODULE_0__[\"INVALID_MOVE\"];\n  }\n\n  const {\n    card,\n    lastCards\n  } = getCards(G, ctx.playerID); // Card is lower than every in deck OR\n  // card is #6 move all cards from deck to player's hand\n\n  if (card.number < lastCards[0].number || G.decks[id].length === 5) {\n    return moveToHand(G, ctx, card, id);\n  } // Append card\n\n\n  return Object.assign({}, G, {\n    decks: Object.values(Object.assign({}, G.decks, {\n      [id]: [...G.decks[id], card]\n    }))\n  });\n}\nconst GameConfig = {\n  name: 'takesix',\n  flow: {\n    endTurn: false,\n    endPhase: false,\n    endGame: false,\n    startingPhase: 'CARD_SELECT',\n    phases: {\n      // Everyone needs to select card\n      CARD_SELECT: {\n        allowedMoves: ['selectCard'],\n        turnOrder: _freeboardgame_org_boardgame_io_core__WEBPACK_IMPORTED_MODULE_0__[\"TurnOrder\"].ANY_ONCE,\n        next: 'DECK_SELECT',\n        // Determine player order\n        onPhaseEnd: G => {\n          const selectedCards = G.players.map(player => player.selectedCard);\n          selectedCards.sort(sortCards);\n          return Object.assign({}, G, {\n            cardOrder: selectedCards.map(card => card.owner).map(owner => owner.toString())\n          });\n        }\n      },\n      // Select deck\n      DECK_SELECT: {\n        allowedMoves: ['selectDeck'],\n        next: 'CARD_SELECT',\n        // Implement CUSTOM_FROM_ONCE\n        turnOrder: {\n          playOrder: G => G.cardOrder,\n          first: () => 0,\n          next: (_, ctx) => {\n            if (ctx.playOrderPos < ctx.playOrder.length - 1) {\n              return ctx.playOrderPos + 1;\n            }\n          }\n        },\n        onMove: (_, ctx) => {\n          ctx.events.endTurn();\n        },\n        onPhaseEnd: G => {\n          if (G.players[0].cards.length === 0) {\n            G.end = true;\n          }\n        }\n      }\n    },\n    endGameIf: G => {\n      if (G.end === true) {\n        const scoreboard = getScoreBoard(G);\n\n        if (scoreboard[0].score === scoreboard[1].score) {\n          return {\n            draw: true\n          };\n        } else {\n          return {\n            winner: scoreboard[0].playerID.toString()\n          };\n        }\n      }\n    }\n  },\n  // playerView: PlayerView.STRIP_SECRETS,\n  setup: ctx => {\n    // Generate deck\n    const deck = ctx.random.Shuffle(new Array(104).fill(0).map((_, i) => {\n      let value = 1;\n\n      if ((i + 1) % 55 === 0) {\n        value = 7;\n      } else if ((i + 1) % 11 === 0) {\n        value = 5;\n      } else if ((i + 1) % 10 === 0) {\n        value = 3;\n      } else if ((i + 1) % 5 === 0) {\n        value = 2;\n      }\n\n      return new _card__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i + 1, value, null);\n    })); // Set initial state\n\n    return {\n      decks: new Array(4).fill(0).map(() => deck.pop()).sort(sortCards).map(card => [card]),\n      players: new Array(ctx.numPlayers).fill(0).map((_, i) => new _player__WEBPACK_IMPORTED_MODULE_2__[\"default\"](new Array(10).fill(0).map(() => {\n        const card = deck.pop();\n        card.owner = i;\n        return card;\n      }).sort(sortCards), null)),\n      cardOrder: [],\n      end: false\n    };\n  },\n  moves: {\n    selectCard,\n    selectDeck\n  }\n};\nconst TakeSixGame = Object(_freeboardgame_org_boardgame_io_core__WEBPACK_IMPORTED_MODULE_0__[\"Game\"])(GameConfig);\nconst TakeSixGameForTest = override => Object(_freeboardgame_org_boardgame_io_core__WEBPACK_IMPORTED_MODULE_0__[\"Game\"])(Object.assign({}, GameConfig, override));\n\n//# sourceURL=webpack:///./src/games/takesix/game.ts?");

/***/ }),

/***/ "./src/games/takesix/player.ts":
/*!*************************************!*\
  !*** ./src/games/takesix/player.ts ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Player; });\nclass Player {\n  constructor(cards, selectedCard) {\n    this.cards = cards;\n    this.selectedCard = selectedCard;\n    this.penaltyCards = [];\n  }\n\n}\n\n//# sourceURL=webpack:///./src/games/takesix/player.ts?");

/***/ })

};;