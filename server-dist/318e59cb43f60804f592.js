exports.ids = [18];
exports.modules = {

/***/ "./src/games/tictactoe/ai.ts":
/*!***********************************!*\
  !*** ./src/games/tictactoe/ai.ts ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _freeboardgame_org_boardgame_io_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @freeboardgame.org/boardgame.io/ai */ \"@freeboardgame.org/boardgame.io/ai\");\n/* harmony import */ var _freeboardgame_org_boardgame_io_ai__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_freeboardgame_org_boardgame_io_ai__WEBPACK_IMPORTED_MODULE_0__);\nvar __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\n\n\nclass TictactoeRandomBot {\n  play(state, playerID) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const cell = this.generateRandomMove(state);\n      return this.makeMove(playerID, cell);\n    });\n  }\n\n  generateRandomMove(state) {\n    const freeCellsIndexes = [];\n    const cells = state.G.cells;\n\n    for (let i = 0; i < cells.length; i++) {\n      if (cells[i] === null) {\n        freeCellsIndexes.push(i);\n      }\n    }\n\n    const randIndex = this.randomNumber(0, freeCellsIndexes.length - 1);\n    const cell = freeCellsIndexes[randIndex];\n    return cell;\n  }\n\n  makeMove(playerID, cell) {\n    return {\n      action: {\n        type: 'MAKE_MOVE',\n        payload: {\n          type: 'clickCell',\n          args: [cell],\n          playerID\n        }\n      }\n    };\n  }\n\n  randomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n}\n\nconst config = {\n  bgioAI: level => {\n    if (level === '2') {\n      // Hard\n      return Object(_freeboardgame_org_boardgame_io_ai__WEBPACK_IMPORTED_MODULE_0__[\"AI\"])({\n        enumerate: G => {\n          const moves = [];\n\n          for (let i = 0; i < 9; i++) {\n            if (G.cells[i] === null) {\n              moves.push({\n                move: 'clickCell',\n                args: [i]\n              });\n            }\n          }\n\n          return moves;\n        }\n      });\n    } else if (level === '1') {\n      // Easy\n      return {\n        bot: TictactoeRandomBot\n      };\n    }\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (config);\n\n//# sourceURL=webpack:///./src/games/tictactoe/ai.ts?");

/***/ })

};;